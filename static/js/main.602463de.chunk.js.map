{"version":3,"sources":["components/Header.js","components/Analogic.js","components/Digital.js","pages/Watch.js","App.js","serviceWorker.js","index.js"],"names":["Header","actMode","actWatch","className","type","id","htmlFor","onClick","Analogic","mode","useEffect","setInterval","hr","document","querySelector","mn","sc","day","Date","hh","getHours","mm","getMinutes","ss","getSeconds","style","transform","Digital","S1","Math","floor","S2","M1","M2","H1","H2","Watch","watch","App","useState","setMode","setWatch","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.602463de.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport '../css/Header.css'\r\n\r\nexport const Header = ({actMode,actWatch}) => {\r\n  return (\r\n    <ul className='options'>\r\n      <li className='tg-list-item'>\r\n        <input type='checkbox' id='btnDarkLight' className='toggle' />\r\n        <label htmlFor='btnDarkLight' id='btnMode' className='btn-toggle' onClick={()=>actMode()}></label>\r\n      </li>\r\n      <li className='tg-list-item'>\r\n        <input type='checkbox' id='btnDigAna' className='toggle' />\r\n        <label htmlFor='btnDigAna' id='btnWatch' className='btn-toggle' onClick={()=>actWatch()}></label>\r\n      </li>\r\n    </ul>\r\n  )\r\n}","import React, { useEffect } from 'react'\r\n\r\nexport const Analogic = ({mode}) => {\r\n  useEffect(()=>{\r\n    setInterval(()=>{\r\n      const deg = 6 \r\n      // Hands\r\n      const hr = document.querySelector('#hr')\r\n      const mn = document.querySelector('#mn')\r\n      const sc = document.querySelector('#sc')\r\n      let day = new Date()\r\n      let hh = day.getHours() * 30\r\n      let mm = day.getMinutes() * deg\r\n      let ss = day.getSeconds() * deg\r\n  \r\n      hr.style.transform = `rotate(${(hh)+(mm/22)}deg)`\r\n      mn.style.transform = `rotate(${mm}deg)`\r\n      sc.style.transform = `rotate(${ss}deg)`\r\n    })\r\n  })\r\n  return (\r\n    <div id=\"analogic\" className={mode ? \"analogic analogic-dark\" :\"analogic analogic-light\"}>\r\n      <ul className=\"hours-marks\" id='marks'>\r\n        <li></li>\r\n        <li></li>\r\n        <li></li>\r\n        <li></li>\r\n        <li></li>\r\n        <li></li>\r\n        <li></li>\r\n        <li></li>\r\n      </ul>\r\n      <ul className=\"digits\" id=\"digits\">\r\n        <li>3</li>\r\n        <li>6</li>\r\n        <li>9</li>\r\n        <li>12</li>\r\n      </ul>\r\n      <div className=\"hours-hand\" id=\"hr\"></div>\r\n      <div className=\"minutes-hand\" id=\"mn\"></div>\r\n      <div className=\"seconds-hand\" id=\"sc\"></div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\n\r\nimport '../css/Digital.css'\r\n\r\nexport const Digital = ({mode}) => {\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      let day = new Date()\r\n      let hh = day.getHours() \r\n      let mm = day.getMinutes() \r\n      let ss = day.getSeconds() \r\n    \r\n      let S1 = Math.floor(ss/10)\r\n      let S2 = ss%10\r\n      let M1 = Math.floor(mm/10)\r\n      let M2 = mm%10\r\n      let H1 = Math.floor(hh/10)\r\n      let H2 = hh%10\r\n    \r\n      document.querySelector('.H1').className = `number H1 show-${H1}`\r\n      document.querySelector('.H2').className = `number H2 show-${H2}`\r\n      document.querySelector('.M1').className = `number M1 show-${M1}`\r\n      document.querySelector('.M2').className = `number M2 show-${M2}`\r\n      document.querySelector('.S1').className = `number S1 show-${S1}`\r\n      document.querySelector('.S2').className = `number S2 show-${S2}`\r\n    }); \r\n  })\r\n  return (\r\n    <div className={mode ? 'digital digital-dark' : 'digital digital-light'} id='digital'>\r\n      <div className='digital-numbers'>\r\n        <div className='number H1 show-8'>\r\n          <span className='d1'></span>\r\n          <span className='d2'></span>\r\n          <span className='d3'></span>\r\n          <span className='d4'></span>\r\n          <span className='d5'></span>\r\n          <span className='d6'></span>\r\n          <span className='d7'></span>\r\n        </div>\r\n        <div className='number H2 show-8'>\r\n          <span className='d1'></span>\r\n          <span className='d2'></span>\r\n          <span className='d3'></span>\r\n          <span className='d4'></span>\r\n          <span className='d5'></span>\r\n          <span className='d6'></span>\r\n          <span className='d7'></span>\r\n        </div>\r\n        <span className='dot'>:</span>\r\n        <div className='number M1 show-8'>\r\n          <span className='d1'></span>\r\n          <span className='d2'></span>\r\n          <span className='d3'></span>\r\n          <span className='d4'></span>\r\n          <span className='d5'></span>\r\n          <span className='d6'></span>\r\n          <span className='d7'></span>\r\n        </div>\r\n        <div className='number M2 show-8'>\r\n          <span className='d1'></span>\r\n          <span className='d2'></span>\r\n          <span className='d3'></span>\r\n          <span className='d4'></span>\r\n          <span className='d5'></span>\r\n          <span className='d6'></span>\r\n          <span className='d7'></span>\r\n        </div>\r\n        <span className='dot'>:</span>\r\n        <div className='number S1 show-8'>\r\n          <span className='d1'></span>\r\n          <span className='d2'></span>\r\n          <span className='d3'></span>\r\n          <span className='d4'></span>\r\n          <span className='d5'></span>\r\n          <span className='d6'></span>\r\n          <span className='d7'></span>\r\n        </div>\r\n        <div className='number S2 show-8'>\r\n          <span className='d1'></span>\r\n          <span className='d2'></span>\r\n          <span className='d3'></span>\r\n          <span className='d4'></span>\r\n          <span className='d5'></span>\r\n          <span className='d6'></span>\r\n          <span className='d7'></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { Fragment } from 'react'\r\n\r\nimport { Analogic } from '../components/Analogic'\r\nimport { Digital } from '../components/Digital'\r\n\r\nimport '../css/Watch.css'\r\n\r\nexport const Watch = ({mode,watch}) => {\r\n\r\n  return(\r\n    <Fragment>\r\n      <div \r\n        className='container container-digital' \r\n        style={{'display':`${watch ? 'flex' : 'none'}`}}\r\n      >\r\n        <Digital mode={mode} />\r\n      </div>\r\n      <div \r\n        className='container container-analogic' \r\n        style={{'display':`${!watch ? 'flex' : 'none'}`}}\r\n      >\r\n        <Analogic mode={mode} />\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n","import React , { useState,Fragment , useEffect} from 'react';\n\nimport { Header } from './components/Header'\nimport { Watch } from './pages/Watch'\n\nexport const App = () => {\n  const [mode,setMode] = useState(false)\n  const [watch,setWatch] = useState(false)\n  useEffect(() => {\n    if(mode){\n      document.querySelector('.body').className = 'body body-dark'\n    }else{\n      document.querySelector('.body').className = 'body body-light'\n    }\n  })\n  const actMode = () => {\n    setMode(!mode)\n  }\n  const actWatch = () => {\n    setWatch(!watch)\n  }\n  return (\n    <Fragment>\n      <Header \n        actMode={actMode}\n        actWatch={actWatch}\n      />\n      <Watch mode={mode} watch={watch} />\n    </Fragment>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\n\nimport './index.css';\n\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}